{"version":3,"sources":["App.js","functions/movement.js","serviceWorkerRegistration.js","index.js"],"names":["App","useState","spawn","setSpawn","score","setScore","bestScore","setBestScore","winner","setWinner","Math","min","window","innerWidth","innerHeight","boardWidth","setBoardWidth","createBoard","board","i","row","j","push","left","top","occupied","setBoard","duplicateBoard","boardCopy","tiles","setTiles","windowResized","keyPressed","e","direction","key","newBoard","newTiles","forEach","tile","duplicateTiles","map","topFrom","leftFrom","move","didMove","movedBoard","movedTiles","movedScore","filter","length","index","findIndex","distance","k","hitIndex","value","splice","movement","Number","console","log","localStorage","setItem","wrapperRef","useRef","useEffect","addEventListener","current","focus","bestLocal","getItem","position","col","floor","random","newTile","spawnTile","className","onKeyDown","tabIndex","ref","onClick","tileStyle","animation","style","aria-label","xmlns","width","height","fill","viewBox","fillRule","d","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ac1005e2.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect, useRef } from \"react\";\nimport * as movement from \"./functions/movement.js\";\n\nfunction App() {\n  const [spawn, setSpawn] = useState(true);\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [winner, setWinner] = useState(0);\n\n  const [boardWidth, setBoardWidth] = useState(\n    Math.min(0.8 * window.innerWidth, 0.7 * window.innerHeight)\n  );\n\n  // Create board\n  const createBoard = () => {\n    const board = [];\n    for (let i = 0; i < 4; i++) {\n      const row = [];\n      for (let j = 0; j < 4; j++) {\n        row.push({\n          left: j,\n          top: i,\n          occupied: false,\n        });\n      }\n      board.push(row);\n    }\n    return board;\n  };\n\n  const [board, setBoard] = useState(createBoard());\n\n  // Duplicate immutably\n  const duplicateBoard = () => {\n    const boardCopy = [];\n    for (let i = 0; i < 4; i++) {\n      const row = [];\n      for (let j = 0; j < 4; j++) {\n        row.push({\n          left: j,\n          top: i,\n          occupied: board[i][j].occupied,\n        });\n      }\n      boardCopy.push(row);\n    }\n    return boardCopy;\n  };\n\n  const [tiles, setTiles] = useState([]);\n\n  const duplicateTiles = () => {\n    const newTiles = [];\n    tiles.forEach((tile) => {\n      newTiles.push({ ...tile });\n    });\n    return newTiles;\n  };\n\n  // Spawn new tile in random position\n  const spawnTile = () => {\n    let occupied = true;\n    let position;\n    let row;\n    let col;\n\n    // If board full don't spawn\n    if (tiles.length === 16) {\n      return;\n    }\n\n    // Search for empty space\n    while (occupied) {\n      row = Math.floor(Math.random() * 4);\n      col = Math.floor(Math.random() * 4);\n      position = board[row][col];\n      occupied = position.occupied;\n    }\n\n    const newTile = {\n      left: position.left,\n      top: position.top,\n      leftFrom: position.left,\n      topFrom: position.top,\n      value: 2,\n    };\n    setTiles([...tiles, newTile]);\n\n    // Set occupied on board\n    const newBoard = duplicateBoard();\n    newBoard[row][col].occupied = true;\n    setBoard(newBoard);\n  };\n\n  // Update board width when window resized\n  const windowResized = () => {\n    setBoardWidth(Math.min(0.8 * window.innerWidth, 0.7 * window.innerHeight));\n  };\n\n  // Press keys to move\n  const keyPressed = (e) => {\n    // If on winning screen do nothing\n    if (winner === 1) {\n      return;\n    }\n\n    // Get direction from keyboard or on-screen buttons\n    let direction;\n    if (e.key === \"d\" || e.key === \"ArrowRight\" || e === \"right\") {\n      direction = \"right\";\n    } else if (e.key === \"a\" || e.key === \"ArrowLeft\" || e === \"left\") {\n      direction = \"left\";\n    } else if (e.key === \"w\" || e.key === \"ArrowUp\" || e === \"up\") {\n      direction = \"up\";\n    } else if (e.key === \"s\" || e.key === \"ArrowDown\" || e === \"down\") {\n      direction = \"down\";\n    }\n\n    const newBoard = duplicateBoard();\n    let newTiles = duplicateTiles();\n\n    // Reset topFrom and leftFrom\n    newTiles = newTiles.map((tile) => {\n      return { ...tile, topFrom: tile.top, leftFrom: tile.left };\n    });\n\n    let move = { didMove: false };\n    switch (direction) {\n      case \"right\":\n        move = movement.moveRight(newBoard, newTiles, Number(score));\n        break;\n      case \"left\":\n        move = movement.moveLeft(newBoard, newTiles, Number(score));\n        break;\n      case \"up\":\n        move = movement.moveUp(newBoard, newTiles, Number(score));\n        break;\n      case \"down\":\n        move = movement.moveDown(newBoard, newTiles, Number(score));\n        break;\n      default:\n        break;\n    }\n\n    // If moved change board and tiles and spawn new tile\n    if (move.didMove) {\n      setBoard(move.movedBoard);\n      setTiles(move.movedTiles);\n      setSpawn(true);\n\n      // Update score\n      setScore(move.movedScore);\n\n      // Update best score in state and local storage\n      if (move.movedScore > bestScore) {\n        setBestScore(move.movedScore);\n        localStorage.setItem(\"bestScore\", move.movedScore);\n      }\n\n      // Check to see if 2048 was achieved\n      const winning = move.movedTiles.filter((tile) => tile.value === 2048);\n\n      if (winning.length) {\n        setWinner(winner + 1);\n      }\n    }\n  };\n\n  // Focus wrapper on start to allow key presses\n  const wrapperRef = useRef(null);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", windowResized);\n    wrapperRef.current.focus();\n\n    // Get previous best score\n    const bestLocal = Number(localStorage.getItem(\"bestScore\"));\n    if (bestLocal) {\n      setBestScore(bestLocal);\n    }\n\n    // eslint-disable-next-line\n  }, []);\n\n  // Spawn on first load and if last movement set it to true\n  if (spawn) {\n    spawnTile();\n    setSpawn(false);\n  }\n\n  // Reset game\n  const resetGame = () => {\n    setScore(0);\n    setBoard(createBoard());\n    setTiles([]);\n    setSpawn(true);\n    setWinner(0);\n  };\n\n  // Keep playing button\n  const keepPlaying = () => {\n    setWinner(2);\n    wrapperRef.current.focus();\n  };\n\n  return (\n    <div\n      className=\"wrapper\"\n      onKeyDown={keyPressed}\n      tabIndex=\"0\"\n      ref={wrapperRef}\n    >\n      <div className=\"header\">\n        <div>\n          <button onClick={resetGame}>New Game</button>\n        </div>\n        <div className=\"score\">\n          <div>\n            <h3>Score</h3>\n            <h4>{score}</h4>\n          </div>\n        </div>\n        <div className=\"score\">\n          <div>\n            <h3>Best</h3>\n            <h4>{bestScore}</h4>\n          </div>\n        </div>\n      </div>\n      <div className=\"App\">\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        <div className=\"grid\">\n          <div></div>\n        </div>\n        {tiles.map((tile, index) => {\n          const tileStyle = {\n            left: `${tile.left * boardWidth * 0.25}px`,\n            top: `${tile.top * boardWidth * 0.25}px`,\n            \"--left\": `${tile.left * boardWidth * 0.25}px`,\n            \"--leftFrom\": `${tile.leftFrom * boardWidth * 0.25}px`,\n            \"--top\": `${tile.top * boardWidth * 0.25}px`,\n            \"--topFrom\": `${tile.topFrom * boardWidth * 0.25}px`,\n            animation: \"slide 0.1s\",\n          };\n\n          // If last fade in after movement\n          if (index === tiles.length - 1) {\n            tileStyle.animation = \"fadeIn 0.2s cubic-bezier(1,0,1,.001)\";\n          }\n          return (\n            <div\n              className=\"tile\"\n              key={`${tile.left}${tile.top}`}\n              style={tileStyle}\n            >\n              <div className={`tile-${tile.value}`}>\n                <p>{tile.value}</p>\n              </div>\n            </div>\n          );\n        })}\n        {winner === 1 ? (\n          <div className=\"winner\">\n            <h1>Winner</h1>\n            <button onClick={keepPlaying}>Keep Playing</button>\n          </div>\n        ) : null}\n      </div>\n      <div className=\"buttons\">\n        <div>\n          <button\n            className=\"up\"\n            aria-label=\"up\"\n            onClick={() => keyPressed(\"up\")}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"16\"\n              height=\"16\"\n              fill=\"currentColor\"\n              viewBox=\"0 0 16 16\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z\"\n              />\n            </svg>\n          </button>\n          <button\n            className=\"left\"\n            aria-label=\"left\"\n            onClick={() => keyPressed(\"left\")}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"16\"\n              height=\"16\"\n              fill=\"currentColor\"\n              viewBox=\"0 0 16 16\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z\"\n              />\n            </svg>\n          </button>\n          <button\n            className=\"right\"\n            aria-label=\"right\"\n            onClick={() => keyPressed(\"right\")}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"16\"\n              height=\"16\"\n              fill=\"currentColor\"\n              viewBox=\"0 0 16 16\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z\"\n              />\n            </svg>\n          </button>\n          <button\n            className=\"down\"\n            aria-label=\"down\"\n            onClick={() => keyPressed(\"down\")}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"16\"\n              height=\"16\"\n              fill=\"currentColor\"\n              viewBox=\"0 0 16 16\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1z\"\n              />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const moveRight = (movedBoard, movedTiles, movedScore) => {\n  let didMove = false;\n  for (let i = 3; i >= 0; i--) {\n    for (let j = 0; j <= 3; j++) {\n      const tile = movedTiles.filter((tile) => {\n        return tile.left === i && tile.top === j;\n      });\n\n      // Stop if not a tile or in position would leave moved if moved\n      if (!tile.length || i === 3) {\n        continue;\n      }\n\n      // Get index of tile in state\n      const index = movedTiles.findIndex(\n        (tile) => tile.left === i && tile.top === j\n      );\n\n      // Get how far the tile can move\n      let distance = 0;\n      let k = i + 1;\n      while (k <= 3 && !movedBoard[j][k].occupied) {\n        distance++;\n        k++;\n      }\n\n      // Get index of hit tile\n      const hitIndex = movedTiles.findIndex(\n        (tile) => tile.left === i + distance + 1 && tile.top === j\n      );\n\n      // Check if can merge\n      if (\n        distance + i + 1 <= 3 &&\n        movedBoard[j][i + distance + 1].occupied &&\n        hitIndex !== -1 &&\n        movedTiles[hitIndex].value === movedTiles[index].value\n      ) {\n        // Add to score\n        movedScore += movedTiles[hitIndex].value * 2;\n\n        // Change value of hit tile\n        movedTiles[hitIndex].value *= 2;\n\n        // Delete current tile\n        movedTiles.splice(index, 1);\n\n        // Change to unoccupied\n        movedBoard[j][i].occupied = false;\n\n        didMove = true;\n      } else {\n        // Return if nothing can move\n        if (!distance) {\n          continue;\n        }\n\n        // Move to right unoccupied space\n        movedTiles[index].leftFrom = movedTiles[index].left;\n        movedTiles[index].left = movedTiles[index].left + distance;\n\n        movedBoard[j][i].occupied = false;\n        movedBoard[j][i + distance].occupied = true;\n        didMove = true;\n      }\n    }\n  }\n  return { movedBoard, movedTiles, didMove, movedScore };\n};\n\nexport const moveLeft = (movedBoard, movedTiles, movedScore) => {\n  let didMove = false;\n  for (let i = 0; i <= 3; i++) {\n    for (let j = 0; j <= 3; j++) {\n      const tile = movedTiles.filter((tile) => {\n        return tile.left === i && tile.top === j;\n      });\n\n      // Stop if not a tile or in position would leave moved if moved\n      if (!tile.length || i === 0) {\n        continue;\n      }\n\n      // Get index of tile in state\n      const index = movedTiles.findIndex(\n        (tile) => tile.left === i && tile.top === j\n      );\n\n      // Get how far the tile can move\n      let distance = 0;\n      let k = i - 1;\n      while (k >= 0 && !movedBoard[j][k].occupied) {\n        distance++;\n        k--;\n      }\n\n      // Get index of hit tile\n      const hitIndex = movedTiles.findIndex(\n        (tile) => tile.left === i - distance - 1 && tile.top === j\n      );\n\n      // Check if can merge\n      if (\n        i - distance - 1 >= 0 &&\n        movedBoard[j][i - distance - 1].occupied &&\n        hitIndex !== -1 &&\n        movedTiles[hitIndex].value === movedTiles[index].value\n      ) {\n        console.log(\"merge\");\n\n        console.log(\"mer\", movedTiles[index], movedTiles[hitIndex]);\n\n        // If values equal merge tiles\n\n        console.log(\"go\");\n\n        // Add to score\n        movedScore += movedTiles[hitIndex].value * 2;\n\n        // Change value of hit tile\n        movedTiles[hitIndex].value *= 2;\n\n        // Delete current tile\n        movedTiles.splice(index, 1);\n\n        // Change to unoccupied\n        movedBoard[j][i].occupied = false;\n\n        didMove = true;\n      } else {\n        // Return if nothing can move\n        if (!distance) {\n          continue;\n        }\n\n        // Move to right unoccupied space\n        movedTiles[index].leftFrom = movedTiles[index].left;\n        movedTiles[index].left = movedTiles[index].left - distance;\n\n        movedBoard[j][i].occupied = false;\n        movedBoard[j][i - distance].occupied = true;\n        didMove = true;\n      }\n    }\n  }\n  return { movedBoard, movedTiles, didMove, movedScore };\n};\n\nexport const moveUp = (movedBoard, movedTiles, movedScore) => {\n  let didMove = false;\n  for (let i = 0; i <= 3; i++) {\n    for (let j = 0; j <= 3; j++) {\n      const tile = movedTiles.filter((tile) => {\n        return tile.left === j && tile.top === i;\n      });\n\n      // Stop if not a tile or in position would leave moved if moved\n      if (!tile.length || i === 0) {\n        continue;\n      }\n\n      // Get index of tile in state\n      const index = movedTiles.findIndex(\n        (tile) => tile.left === j && tile.top === i\n      );\n\n      // Get how far the tile can move\n      let distance = 0;\n      let k = i - 1;\n      while (k >= 0 && !movedBoard[k][j].occupied) {\n        distance++;\n        k--;\n      }\n\n      // Get index of hit tile\n      const hitIndex = movedTiles.findIndex(\n        (tile) => tile.left === j && tile.top === i - distance - 1\n      );\n\n      // Check if can merge\n      if (\n        i - distance - 1 >= 0 &&\n        movedBoard[i - distance - 1][j].occupied &&\n        hitIndex !== -1 &&\n        movedTiles[hitIndex].value === movedTiles[index].value\n      ) {\n        console.log(\"merge\");\n\n        console.log(\"mer\", movedTiles[index], movedTiles[hitIndex]);\n\n        // If values equal merge tiles\n\n        console.log(\"go\");\n\n        // Add to score\n        movedScore += movedTiles[hitIndex].value * 2;\n\n        // Change value of hit tile\n        movedTiles[hitIndex].value *= 2;\n\n        // Delete current tile\n        movedTiles.splice(index, 1);\n\n        // Change to unoccupied\n        movedBoard[i][j].occupied = false;\n\n        didMove = true;\n      } else {\n        // Return if nothing can move\n        if (!distance) {\n          continue;\n        }\n        // Move to right unoccupied space\n        movedTiles[index].topFrom = movedTiles[index].top;\n        movedTiles[index].top = movedTiles[index].top - distance;\n\n        movedBoard[i][j].occupied = false;\n        movedBoard[i - distance][j].occupied = true;\n        didMove = true;\n      }\n    }\n  }\n  return { movedBoard, movedTiles, didMove, movedScore };\n};\n\nexport const moveDown = (movedBoard, movedTiles, movedScore) => {\n  let didMove = false;\n  for (let i = 3; i >= 0; i--) {\n    for (let j = 0; j <= 3; j++) {\n      const tile = movedTiles.filter((tile) => {\n        return tile.left === j && tile.top === i;\n      });\n\n      // Stop if not a tile or in position would leave moved if moved\n      if (!tile.length || i === 3) {\n        continue;\n      }\n\n      // Get index of tile in state\n      const index = movedTiles.findIndex(\n        (tile) => tile.left === j && tile.top === i\n      );\n\n      // Get how far the tile can move\n      let distance = 0;\n      let k = i + 1;\n      while (k <= 3 && !movedBoard[k][j].occupied) {\n        distance++;\n        k++;\n      }\n\n      // Get index of hit tile\n      const hitIndex = movedTiles.findIndex(\n        (tile) => tile.left === j && tile.top === i + distance + 1\n      );\n\n      // Check if can merge\n      if (\n        i + distance + 1 <= 3 &&\n        movedBoard[i + distance + 1][j].occupied &&\n        hitIndex !== -1 &&\n        movedTiles[hitIndex].value === movedTiles[index].value\n      ) {\n        // Add to score\n        movedScore += movedTiles[hitIndex].value * 2;\n\n        // Change value of hit tile\n        movedTiles[hitIndex].value *= 2;\n\n        // Delete current tile\n        movedTiles.splice(index, 1);\n\n        // Change to unoccupied\n        movedBoard[i][j].occupied = false;\n\n        didMove = true;\n      } else {\n        // Return if nothing can move\n        if (!distance) {\n          continue;\n        }\n\n        // Move to right unoccupied space\n        movedTiles[index].topFrom = movedTiles[index].top;\n        movedTiles[index].top = movedTiles[index].top + distance;\n\n        movedBoard[i][j].occupied = false;\n        movedBoard[i + distance][j].occupied = true;\n        didMove = true;\n      }\n    }\n  }\n  return { movedBoard, movedTiles, didMove, movedScore };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}